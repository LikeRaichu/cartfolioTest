{"version":3,"sources":["images/image1.jpg","images/image2.jpg","images/image3.jpg","images/image4.jpg","images/image5.jpg","contexts/pageTransContext.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PageTransContext","createContext","PageTransProvider","props","children","useState","pageTrans","setPageTrans","Provider","value","Footer","useContext","gnb","to","name","handleOnClick","index","direction","gnbIndex","pageDirection","matched","find","menu","window","location","pathname","matchedIndex","indexOf","getTransDirection","className","map","i","key","exact","onClick","Page1","style","backgroundImage","image1","Page2","image2","Page3","image3","Page4","image4","Page5","image5","history","createBrowserHistory","App","classNames","appear","appearActive","appearDone","enter","enterActive","enterDone","exit","exitActive","exitDone","render","TransitionGroup","CSSTransition","timeout","path","component","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29c62fa8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image1.476867ea.jpg\";","module.exports = __webpack_public_path__ + \"static/media/image2.f4b232a8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/image3.84ff3856.jpg\";","module.exports = __webpack_public_path__ + \"static/media/image4.8042bf13.jpg\";","module.exports = __webpack_public_path__ + \"static/media/image5.89976761.jpg\";","import React, { createContext, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const PageTransContext = createContext([{}, () => {}])\r\n\r\nexport const PageTransProvider = props => {\r\n  const { children } = props\r\n  const [pageTrans, setPageTrans] = useState('trans toRight')\r\n  return <PageTransContext.Provider value={{ pageTrans, setPageTrans }}>{children}</PageTransContext.Provider>\r\n}\r\n\r\nPageTransProvider.propTypes = {\r\n  children: PropTypes.node\r\n}\r\n\r\nexport default { PageTransContext, PageTransProvider }","import React, { useContext } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport { PageTransContext } from './contexts/pageTransContext'\r\n\r\nconst getGnb = () => {\r\n  return [\r\n    {\r\n      to: '/',\r\n      name: '쯔위'\r\n    },\r\n    {\r\n      to: '/2',\r\n      name: '손나은'\r\n    },\r\n    {\r\n      to: '/3',\r\n      name: '수지'\r\n    },\r\n    {\r\n      to: '/4',\r\n      name: '아이유'\r\n    },\r\n    {\r\n      to: '/5',\r\n      name: '설현'\r\n    }\r\n  ]\r\n}\r\n\r\nconst getTransDirection = (gnb, gnbIndex) => {\r\n  let pageDirection = 'trans toRight'\r\n  const matched = gnb.find(menu => menu.to === window.location.pathname)\r\n  let matchedIndex = gnb.indexOf(matched)\r\n\r\n  if (matchedIndex === -1) {\r\n    matchedIndex = 1\r\n  }\r\n\r\n  if (gnbIndex !== matchedIndex) {\r\n    if (gnbIndex >= matchedIndex) {\r\n      pageDirection = 'trans toRight'\r\n    } else {\r\n      pageDirection = 'trans toLeft'\r\n    }\r\n  }\r\n\r\n  return pageDirection\r\n}\r\n\r\nconst Footer = () => {\r\n  const { setPageTrans } = useContext(PageTransContext)\r\n\r\n  const gnb = getGnb()\r\n\r\n  const handleOnClick = index => {\r\n    const direction = getTransDirection(gnb, index)\r\n    setPageTrans(direction)\r\n  }\r\n\r\n  return (\r\n    <nav className=\"footer\">\r\n      {gnb.map((menu, i) => (\r\n          <Link\r\n            key={`gnb-${i}`}\r\n            to={`${menu.to}`}\r\n            exact={menu.exact}\r\n            onClick={() => handleOnClick(i)}\r\n          >\r\n            {menu.name}\r\n          </Link>\r\n        ))}\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Footer;","import React, { useContext } from 'react';\nimport { Switch, Route, Router } from 'react-router-dom'\nimport { createBrowserHistory } from 'history';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport { PageTransContext } from './contexts/pageTransContext';\nimport Footer from './Footer';\n\nimport './App.scss';\nimport image1 from './images/image1.jpg';\nimport image2 from './images/image2.jpg';\nimport image3 from './images/image3.jpg';\nimport image4 from './images/image4.jpg';\nimport image5 from './images/image5.jpg';\n\nconst Page1 = () => <div className=\"page\" style={{ backgroundImage: `url(${image1})`}} />;\nconst Page2 = () => <div className=\"page\" style={{ backgroundImage: `url(${image2})`}} />;\nconst Page3 = () => <div className=\"page\" style={{ backgroundImage: `url(${image3})`}} />;\nconst Page4 = () => <div className=\"page\" style={{ backgroundImage: `url(${image4})`}} />;\nconst Page5 = () => <div className=\"page\" style={{ backgroundImage: `url(${image5})`}} />;\n\nconst history = createBrowserHistory()\n\nfunction App() {\n  let { pageTrans } = useContext(PageTransContext)\n\n  const classNames = {\n    appear: `${pageTrans} appear`,\n    appearActive: `${pageTrans} appear active`,\n    appearDone: `${pageTrans} appear done`,\n    enter: `${pageTrans} enter`,\n    enterActive: `${pageTrans} enter active`,\n    enterDone: `${pageTrans} enter done`,\n    exit: `${pageTrans} exit`,\n    exitActive: `${pageTrans} exit active`,\n    exitDone: `${pageTrans} exit done`\n  }\n\n  return (\n    <Router history={history}>\n      <Route\n        render={({ location }) => (\n          <TransitionGroup className='transitionGroup'>\n            <CSSTransition key={location.pathname} classNames={classNames} timeout={200}>\n              <Switch location={location}>\n                <Route exact path=\"/\" component={Page1} />\n                <Route exact path=\"/2\" component={Page2} />\n                <Route exact path=\"/3\" component={Page3} />\n                <Route exact path=\"/4\" component={Page4} />\n                <Route exact path=\"/5\" component={Page5} />\n              </Switch>\n            </CSSTransition>\n          </TransitionGroup>\n        )}\n      />\n      <Footer />\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { PageTransProvider } from './contexts/pageTransContext';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <PageTransProvider>\n    <App />\n  </PageTransProvider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}